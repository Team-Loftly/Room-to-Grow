/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Author: game_travel (https://sketchfab.com/game_travel)
License: CC-BY-4.0 (http://creativecommons.org/licenses/by/4.0/)
Source: https://sketchfab.com/3d-models/clock-low-poly-a8bf334c411b4acaa2dcfc827f28ebf6
Title: Clock (Low Poly)
*/

import React, { useRef, useEffect } from 'react'
import { useGLTF, useAnimations } from '@react-three/drei'
import { useFrame } from '@react-three/fiber'
import * as THREE from 'three'
import clockScene from "../../assets/3d/furniture/clock.glb"; // Fixed path

const Clock = (props) => {
  const groupRef = useRef();
  const hourHandRef = useRef();
  const minuteHandRef = useRef();
  const { nodes, materials, animations } = useGLTF(clockScene);
  const { actions, mixer } = useAnimations(animations, groupRef);
  const overallScale = [20, 20, 20];

  // Activate built-in animations but make them MUCH slower
  useEffect(() => {
    console.log('Clock available animations:', Object.keys(actions));
    console.log('Animation mixer:', mixer);
    
    // Play all available animations with very slow speed
    Object.keys(actions).forEach((actionName) => {
      const action = actions[actionName];
      if (action) {
        action.play();
        action.setLoop(THREE.LoopRepeat, Infinity);
        
        // Make animations much slower to simulate real clock speed
        // Adjust these values to get the right speed:
        action.timeScale = 0.05;
        
        console.log(`Playing Clock animation: ${actionName} at ${action.timeScale}x speed`);
      }
    });

    return () => {
      Object.keys(actions).forEach((actionName) => {
        actions[actionName]?.stop();
      });
    };
  }, [actions, mixer]);

  // Optional: You can still add some subtle effects
  useFrame((state) => {
    // Add a very subtle breathing effect to the whole clock
    const breathe = 1 + Math.sin(state.clock.elapsedTime * 0.5) * 0.005;
    if (groupRef.current) {
      groupRef.current.scale.set(
        overallScale[0] * breathe,
        overallScale[1] * breathe,
        overallScale[2] * breathe
      );
    }
  });

  return (
    <group ref={groupRef} {...props} scale={overallScale} position={[0, 2, 0]}>
      <group name="Sketchfab_Scene">
        <group name="Sketchfab_model" rotation={[-Math.PI / 2, 0, 0]}>
          <group name="Root">
            <group name="Lamp" position={[4.076, 1.005, 5.904]} rotation={[-0.268, 0.602, 1.931]}>
              <group name="Lamp_1" />
            </group>
            <group name="Obj_Clock">
              {/* Clock face */}
              <mesh
                name="Obj_Clock_0"
                castShadow
                receiveShadow
                geometry={nodes.Obj_Clock_0.geometry}
                material={materials.WhiteAndBlack}
              />
              
              {/* Minute hand (longer hand) - controlled by slow animation */}
              <group 
                name="Obj_Hand001" 
                position={[0, -0.022, 0.029]}
                ref={minuteHandRef}
              >
                <mesh
                  name="Obj_Hand001_0"
                  castShadow
                  receiveShadow
                  geometry={nodes.Obj_Hand001_0.geometry}
                  material={materials.WhiteAndBlack}
                />
              </group>
              
              {/* Hour hand (shorter hand) - controlled by slow animation */}
              <group 
                name="Obj_Hand" 
                position={[0, -0.022, 0.029]}
                ref={hourHandRef}
              >
                <mesh
                  name="Obj_Hand_0"
                  castShadow
                  receiveShadow
                  geometry={nodes.Obj_Hand_0.geometry}
                  material={materials.WhiteAndBlack}
                />
              </group>
            </group>
          </group>
        </group>
      </group>
    </group>
  )
}

useGLTF.preload(clockScene);
export default Clock;
